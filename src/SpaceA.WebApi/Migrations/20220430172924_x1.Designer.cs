// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpaceA.Repository.Context;

namespace SpaceA.WebApi.Migrations
{
    [DbContext(typeof(SpaceAContext))]
    [Migration("20220430172924_x1")]
    partial class x1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SpaceA.Model.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<uint?>("CreatorId")
                        .HasColumnName("creator_id")
                        .HasColumnType("int unsigned");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnName("file_name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<long>("Size")
                        .HasColumnName("size")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UploadedTime")
                        .HasColumnName("uploaded_time")
                        .HasColumnType("datetime(6)");

                    b.Property<uint?>("WorkItemId")
                        .HasColumnName("work_item_id")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("WorkItemId");

                    b.ToTable("attachments");
                });

            modelBuilder.Entity("SpaceA.Model.Entities.Config", b =>
                {
                    b.Property<uint>("Id1")
                        .HasColumnName("MemberId")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Id2")
                        .HasColumnName("Key")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<bool>("IsShared")
                        .HasColumnName("is_shared")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id1", "Id2");

                    b.ToTable("configs");
                });

            modelBuilder.Entity("SpaceA.Model.Entities.Folder", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Path")
                        .HasColumnName("path")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<uint>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.HasIndex("ProjectId");

                    b.ToTable("folders");
                });

            modelBuilder.Entity("SpaceA.Model.Entities.Group", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int unsigned");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnName("account_name")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("Acronym")
                        .HasColumnName("acronym")
                        .HasColumnType("varchar(4) CHARACTER SET utf8mb4")
                        .HasMaxLength(4);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("Disabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("disabled")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<uint?>("LeaderId")
                        .HasColumnName("leader_id")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("LeaderId")
                        .IsUnique();

                    b.ToTable("groups");
                });

            modelBuilder.Entity("SpaceA.Model.Entities.GroupMember", b =>
                {
                    b.Property<uint>("Id1")
                        .HasColumnName("group_id")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("Id2")
                        .HasColumnName("member_id")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id1", "Id2");

                    b.HasIndex("Id2");

                    b.ToTable("group_members");
                });

            modelBuilder.Entity("SpaceA.Model.Entities.Iteration", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Path")
                        .HasColumnName("path")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<uint>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.HasIndex("ProjectId");

                    b.ToTable("iterations");
                });

            modelBuilder.Entity("SpaceA.Model.Entities.Member", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int unsigned");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnName("account_name")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("AvatarUid")
                        .HasColumnName("avatar_uid")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<bool>("Disabled")
                        .HasColumnName("disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<string>("Ming")
                        .HasColumnName("ming")
                        .HasColumnType("varchar(2) CHARACTER SET utf8mb4")
                        .HasMaxLength(2);

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("RefreshToken")
                        .HasColumnName("refresh_token")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Salt")
                        .HasColumnName("salt")
                        .HasColumnType("varchar(6) CHARACTER SET utf8mb4")
                        .HasMaxLength(6);

                    b.Property<string>("Xing")
                        .HasColumnName("xing")
                        .HasColumnType("varchar(2) CHARACTER SET utf8mb4")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("AccountName")
                        .IsUnique();

                    b.ToTable("members");

                    b.HasData(
                        new
                        {
                            Id = 1u,
                            AccountName = "admin",
                            Disabled = false,
                            FirstName = "Admin",
                            Password = "RsVfIR1ZYl7+bVYmg/PjRqviNpw=",
                            Salt = "wWHQd3"
                        });
                });

            modelBuilder.Entity("SpaceA.Model.Entities.MemberCapacity", b =>
                {
                    b.Property<uint>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("IterationId")
                        .HasColumnName("iteration_id")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("MemberId")
                        .HasColumnName("member_id")
                        .HasColumnType("int unsigned");

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("int");

                    b.Property<float>("HoursPerDay")
                        .HasColumnName("hours_per_day")
                        .HasColumnType("float");

                    b.HasKey("TeamId", "IterationId", "MemberId", "Type");

                    b.HasIndex("TeamId", "IterationId");

                    b.ToTable("member_capacities");
                });

            modelBuilder.Entity("SpaceA.Model.Entities.PersonalAccessToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("Token")
                        .HasColumnType("varchar(28) CHARACTER SET utf8mb4")
                        .HasMaxLength(28);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ExpiredAt")
                        .HasColumnName("expired_at")
                        .HasColumnType("datetime(6)");

                    b.Property<uint>("OwnerId")
                        .HasColumnName("owner_id")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Remarks")
                        .HasColumnName("remarks")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("personal_access_tokens");
                });

            modelBuilder.Entity("SpaceA.Model.Entities.Project", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int unsigned");

                    b.Property<string>("AvatarUid")
                        .HasColumnName("avatar_uid")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<DateTime>("ChangedDate")
                        .HasColumnName("changed_date")
                        .HasColumnType("datetime(6)");

                    b.Property<uint?>("ChangerId")
                        .HasColumnName("changer_id")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("datetime(6)");

                    b.Property<uint?>("DefaultTeamId")
                        .HasColumnName("default_team_id")
                        .HasColumnType("int unsigned");

                    b.Property<Guid>("DeletedFlag")
                        .HasColumnName("deleted_flag")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<uint>("OwnerId")
                        .HasColumnName("owner_id")
                        .HasColumnType("int unsigned");

                    b.Property<int>("Rev")
                        .HasColumnName("rev")
                        .HasColumnType("int");

                    b.Property<uint?>("RootFolderId")
                        .HasColumnName("root_folder_id")
                        .HasColumnType("int unsigned");

                    b.Property<uint?>("RootIterationId")
                        .HasColumnName("root_iteration_id")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("DefaultTeamId")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.HasIndex("RootFolderId")
                        .IsUnique();

                    b.HasIndex("RootIterationId")
                        .IsUnique();

                    b.HasIndex("Name", "DeletedFlag")
                        .IsUnique();

                    b.ToTable("projects");
                });

            modelBuilder.Entity("SpaceA.Model.Entities.ProjectHistory", b =>
                {
                    b.Property<uint>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int unsigned");

                    b.Property<int>("Rev")
                        .HasColumnName("rev")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangedDate")
                        .HasColumnName("changed_date")
                        .HasColumnType("datetime(6)");

                    b.Property<uint?>("ChangerId")
                        .HasColumnName("changer_id")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("datetime(6)");

                    b.Property<uint?>("DefaultTeamId")
                        .HasColumnName("default_team_id")
                        .HasColumnType("int unsigned");

                    b.Property<Guid>("DeletedFlag")
                        .HasColumnName("deleted_flag")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<uint>("OwnerId")
                        .HasColumnName("owner_id")
                        .HasColumnType("int unsigned");

                    b.Property<uint?>("RootFolderId")
                        .HasColumnName("root_folder_id")
                        .HasColumnType("int unsigned");

                    b.Property<Guid?>("RootIterationId")
                        .HasColumnName("root_iteration_id")
                        .HasColumnType("char(36)");

                    b.HasKey("Id", "Rev");

                    b.ToTable("project_histories");
                });

            modelBuilder.Entity("SpaceA.Model.Entities.ProjectRepo", b =>
                {
                    b.Property<uint>("Id1")
                        .HasColumnName("project_id")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("Id2")
                        .HasColumnName("repo_id")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id1", "Id2");

                    b.HasIndex("Id2");

                    b.ToTable("project_repos");
                });

            modelBuilder.Entity("SpaceA.Model.Entities.RemainingWork", b =>
                {
                    b.Property<uint>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("IterationId")
                        .HasColumnName("iteration_id")
                        .HasColumnType("int unsigned");

                    b.Property<int>("WorkItemType")
                        .HasColumnName("work_item_type")
                        .HasColumnType("int");

                    b.Property<DateTime>("AccountingDate")
                        .HasColumnName("accounting_date")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("CompletedCount")
                        .HasColumnName("completed_count")
                        .HasColumnType("float");

                    b.Property<float>("CompletedHours")
                        .HasColumnName("completed_hours")
                        .HasColumnType("float");

                    b.Property<float>("EstimatedHours")
                        .HasColumnName("estimated_hours")
                        .HasColumnType("float");

                    b.Property<int>("RemainingCount")
                        .HasColumnName("remaining_count")
                        .HasColumnType("int");

                    b.Property<float>("RemainingHours")
                        .HasColumnName("remaining_hours")
                        .HasColumnType("float");

                    b.HasKey("TeamId", "IterationId", "WorkItemType", "AccountingDate");

                    b.HasIndex("TeamId", "IterationId");

                    b.ToTable("remaining_works");
                });

            modelBuilder.Entity("SpaceA.Model.Entities.Repo", b =>
                {
                    b.Property<uint>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("HttpUrlToRepo")
                        .HasColumnName("http_url_to_repo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NameWithNamespace")
                        .HasColumnName("name_with_namespace")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NamespaceFullPath")
                        .HasColumnName("namespace_full_path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NamespaceKind")
                        .HasColumnName("namespace_kind")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NamespaceName")
                        .HasColumnName("namespace_name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NamespacePath")
                        .HasColumnName("namespace_path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SshUrlToRepo")
                        .HasColumnName("ssh_url_to_repo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("WebUrl")
                        .HasColumnName("web_url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("repos");
                });

            modelBuilder.Entity("SpaceA.Model.Entities.Tag", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Color")
                        .HasColumnName("color")
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<uint?>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Text")
                        .HasColumnName("text")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<uint?>("WorkItemId")
                        .HasColumnName("work_item_id")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("WorkItemId");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("SpaceA.Model.Entities.Team", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Acronym")
                        .HasColumnName("acronym")
                        .HasColumnType("varchar(4) CHARACTER SET utf8mb4")
                        .HasMaxLength(4);

                    b.Property<uint?>("DefaultFolderId")
                        .HasColumnName("default_folder_id")
                        .HasColumnType("int unsigned");

                    b.Property<uint?>("DefaultIterationId")
                        .HasColumnName("default_iteration_id")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<uint>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("DefaultFolderId");

                    b.HasIndex("DefaultIterationId");

                    b.HasIndex("ProjectId", "Name")
                        .IsUnique();

                    b.ToTable("teams");
                });

            modelBuilder.Entity("SpaceA.Model.Entities.TeamFolder", b =>
                {
                    b.Property<uint>("Id1")
                        .HasColumnName("team_id")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("Id2")
                        .HasColumnName("folder_id")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id1", "Id2");

                    b.HasIndex("Id2");

                    b.ToTable("team_folders");
                });

            modelBuilder.Entity("SpaceA.Model.Entities.TeamIteration", b =>
                {
                    b.Property<uint>("Id1")
                        .HasColumnName("team_id")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("Id2")
                        .HasColumnName("iteration_id")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id1", "Id2");

                    b.HasIndex("Id2");

                    b.ToTable("team_iterations");
                });

            modelBuilder.Entity("SpaceA.Model.Entities.TeamMember", b =>
                {
                    b.Property<uint>("Id1")
                        .HasColumnName("team_id")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("Id2")
                        .HasColumnName("member_id")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id1", "Id2");

                    b.HasIndex("Id2");

                    b.ToTable("team_members");
                });

            modelBuilder.Entity("SpaceA.Model.Entities.WorkItem", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int unsigned");

                    b.Property<string>("AcceptCriteria")
                        .HasColumnName("accept_criteria")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<uint?>("AssigneeId")
                        .HasColumnName("assignee_id")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime>("ChangedDate")
                        .HasColumnName("changed_date")
                        .HasColumnType("datetime(6)");

                    b.Property<uint?>("ChangerId")
                        .HasColumnName("changer_id")
                        .HasColumnType("int unsigned");

                    b.Property<float?>("CompletedHours")
                        .HasColumnName("completed_hours")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("datetime(6)");

                    b.Property<uint>("CreatorId")
                        .HasColumnName("creator_id")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Environment")
                        .HasColumnName("environment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float?>("EstimatedHours")
                        .HasColumnName("estimated_hours")
                        .HasColumnType("float");

                    b.Property<float?>("EstimatedTime")
                        .HasColumnName("estimated_time")
                        .HasColumnType("float");

                    b.Property<uint>("FolderId")
                        .HasColumnName("folder_id")
                        .HasColumnType("int unsigned");

                    b.Property<uint?>("IterationId")
                        .HasColumnName("iteration_id")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Order")
                        .HasColumnName("order")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<uint?>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("int unsigned");

                    b.Property<int>("Priority")
                        .HasColumnName("priority")
                        .HasColumnType("int");

                    b.Property<uint>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Reason")
                        .HasColumnName("reason")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<float?>("RemainingHours")
                        .HasColumnName("remaining_hours")
                        .HasColumnType("float");

                    b.Property<string>("ReproSteps")
                        .HasColumnName("repro_steps")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Rev")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rev")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("Severity")
                        .HasColumnName("severity")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnName("state")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("int");

                    b.Property<string>("UploadFiles")
                        .HasColumnName("upload_files")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("ChangerId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FolderId");

                    b.HasIndex("IterationId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("work_items");
                });

            modelBuilder.Entity("SpaceA.Model.Entities.WorkItemHistory", b =>
                {
                    b.Property<uint>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int unsigned");

                    b.Property<int>("Rev")
                        .HasColumnName("rev")
                        .HasColumnType("int");

                    b.Property<string>("AcceptCriteria")
                        .HasColumnName("accept_criteria")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<uint?>("AssigneeId")
                        .HasColumnName("assignee_id")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime>("ChangedDate")
                        .HasColumnName("changed_date")
                        .HasColumnType("datetime(6)");

                    b.Property<uint?>("ChangerId")
                        .HasColumnName("changer_id")
                        .HasColumnType("int unsigned");

                    b.Property<float?>("CompletedHours")
                        .HasColumnName("completed_hours")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("datetime(6)");

                    b.Property<uint>("CreatorId")
                        .HasColumnName("creator_id")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Environment")
                        .HasColumnName("environment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float?>("EstimatedHours")
                        .HasColumnName("estimated_hours")
                        .HasColumnType("float");

                    b.Property<float?>("EstimatedTime")
                        .HasColumnName("estimated_time")
                        .HasColumnType("float");

                    b.Property<uint>("FolderId")
                        .HasColumnName("folder_id")
                        .HasColumnType("int unsigned");

                    b.Property<uint?>("IterationId")
                        .HasColumnName("iteration_id")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Order")
                        .HasColumnName("order")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<uint?>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("int unsigned");

                    b.Property<int>("Priority")
                        .HasColumnName("priority")
                        .HasColumnType("int");

                    b.Property<uint>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Reason")
                        .HasColumnName("reason")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<float?>("RemainingHours")
                        .HasColumnName("remaining_hours")
                        .HasColumnType("float");

                    b.Property<string>("ReproSteps")
                        .HasColumnName("repro_steps")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("Severity")
                        .HasColumnName("severity")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnName("state")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("int");

                    b.Property<string>("UploadFiles")
                        .HasColumnName("upload_files")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id", "Rev");

                    b.ToTable("work_item_histories");
                });

            modelBuilder.Entity("SpaceA.Model.Entities.Attachment", b =>
                {
                    b.HasOne("SpaceA.Model.Entities.Member", "Creator")
                        .WithMany("Attachments")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SpaceA.Model.Entities.WorkItem", "AttachedTo")
                        .WithMany("Attachments")
                        .HasForeignKey("WorkItemId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("SpaceA.Model.Entities.Config", b =>
                {
                    b.HasOne("SpaceA.Model.Entities.Member", "Member")
                        .WithMany("Configs")
                        .HasForeignKey("Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceA.Model.Entities.Folder", b =>
                {
                    b.HasOne("SpaceA.Model.Entities.Project", null)
                        .WithMany("Folders")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceA.Model.Entities.Group", b =>
                {
                    b.HasOne("SpaceA.Model.Entities.Member", "Leader")
                        .WithOne("Group")
                        .HasForeignKey("SpaceA.Model.Entities.Group", "LeaderId");
                });

            modelBuilder.Entity("SpaceA.Model.Entities.GroupMember", b =>
                {
                    b.HasOne("SpaceA.Model.Entities.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaceA.Model.Entities.Member", "Member")
                        .WithMany("GroupMembers")
                        .HasForeignKey("Id2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceA.Model.Entities.Iteration", b =>
                {
                    b.HasOne("SpaceA.Model.Entities.Project", null)
                        .WithMany("Iterations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceA.Model.Entities.PersonalAccessToken", b =>
                {
                    b.HasOne("SpaceA.Model.Entities.Member", "Owner")
                        .WithMany("PersonalAccessTokens")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceA.Model.Entities.Project", b =>
                {
                    b.HasOne("SpaceA.Model.Entities.Team", "DefaultTeam")
                        .WithOne("Project")
                        .HasForeignKey("SpaceA.Model.Entities.Project", "DefaultTeamId");

                    b.HasOne("SpaceA.Model.Entities.Member", "Owner")
                        .WithMany("OwnedProjects")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaceA.Model.Entities.Folder", "RootFolder")
                        .WithOne("Project")
                        .HasForeignKey("SpaceA.Model.Entities.Project", "RootFolderId");

                    b.HasOne("SpaceA.Model.Entities.Iteration", "RootIteration")
                        .WithOne("Project")
                        .HasForeignKey("SpaceA.Model.Entities.Project", "RootIterationId");
                });

            modelBuilder.Entity("SpaceA.Model.Entities.ProjectRepo", b =>
                {
                    b.HasOne("SpaceA.Model.Entities.Project", "Project")
                        .WithMany("ProjectRepos")
                        .HasForeignKey("Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaceA.Model.Entities.Repo", "Repo")
                        .WithMany("ProjectRepos")
                        .HasForeignKey("Id2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceA.Model.Entities.Tag", b =>
                {
                    b.HasOne("SpaceA.Model.Entities.Project", "Project")
                        .WithMany("Tags")
                        .HasForeignKey("ProjectId");

                    b.HasOne("SpaceA.Model.Entities.WorkItem", "WorkItem")
                        .WithMany("Tags")
                        .HasForeignKey("WorkItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SpaceA.Model.Entities.Team", b =>
                {
                    b.HasOne("SpaceA.Model.Entities.Folder", "DefaultFolder")
                        .WithMany("Teams")
                        .HasForeignKey("DefaultFolderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SpaceA.Model.Entities.Iteration", "DefaultIteration")
                        .WithMany()
                        .HasForeignKey("DefaultIterationId");

                    b.HasOne("SpaceA.Model.Entities.Project", null)
                        .WithMany("Teams")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceA.Model.Entities.TeamFolder", b =>
                {
                    b.HasOne("SpaceA.Model.Entities.Team", "Team")
                        .WithMany("TeamFolders")
                        .HasForeignKey("Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaceA.Model.Entities.Folder", "Folder")
                        .WithMany("TeamFolders")
                        .HasForeignKey("Id2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceA.Model.Entities.TeamIteration", b =>
                {
                    b.HasOne("SpaceA.Model.Entities.Team", "Team")
                        .WithMany("TeamIterations")
                        .HasForeignKey("Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaceA.Model.Entities.Iteration", "Iteration")
                        .WithMany("TeamIterations")
                        .HasForeignKey("Id2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceA.Model.Entities.TeamMember", b =>
                {
                    b.HasOne("SpaceA.Model.Entities.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaceA.Model.Entities.Member", "Member")
                        .WithMany("TeamMembers")
                        .HasForeignKey("Id2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceA.Model.Entities.WorkItem", b =>
                {
                    b.HasOne("SpaceA.Model.Entities.Member", "AssignedTo")
                        .WithMany("WorkItems")
                        .HasForeignKey("AssigneeId");

                    b.HasOne("SpaceA.Model.Entities.Member", "Changer")
                        .WithMany("ChangedWorkItems")
                        .HasForeignKey("ChangerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SpaceA.Model.Entities.Member", "Creator")
                        .WithMany("ProposedStories")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaceA.Model.Entities.Folder", "Folder")
                        .WithMany("WorkItems")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SpaceA.Model.Entities.Iteration", "Iteration")
                        .WithMany("WorkItems")
                        .HasForeignKey("IterationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SpaceA.Model.Entities.WorkItem", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SpaceA.Model.Entities.Project", "Project")
                        .WithMany("WorkItems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
